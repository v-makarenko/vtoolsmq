"""
Defines interfaces for genomic (and other) data sources.
"""
import os, re
from datetime import datetime

class SequenceSource(object):
    
    def sequence(self, chromosome, startpos, endpos):
        """
        Just get a sequence at the specified address (FASTA format); startpos and endpos
        are inclusive.  The startpos and the endpos are the ends of the sequence to be
        retrieved.
        """
        return NotImplementedError
    
    def sequences_for_primers(self, primer_fwd, primer_rev, fwd_prefix_length=0, rev_suffix_length=0):
        """
        Return a list of SequenceGroups that match the specified forward and reverse
        primers.  Include padding around the primer matches-- fwd_prefix_length bases before
        the forward_primer start (the 5' -> 3' prefix) and rev_suffix_length bases after
        the reverse_primer end (the 5' -> 3' suffix)
        
        Example.  Let's say a primer is CATT and reverse primer is TGAG, and this matches a
        sequence of length 5 (ATCGG).  The sequence with forward and reverse primer complement
        is:
        
        CATTATCGGCTCA
        
        If fwd_prefix_length is 4, and rev_suffix_length is 3, you get the surrounding 7 base
        pairs like so (prefix and suffix capitalized here-- the return will be uppercase):
        
        GGACcattatcggctcaTTA
        
        If no primers match, return an empty list.
        """
        return NotImplementedError
    
    def sequence_around_loc(self, chromosome, pos, amplicon_width, prefix_length=0, suffix_length=0):
        """
        Given a position (chromosome, position), return a sequence group that would
        accommodate for an amplicon with the specified width, plus padding.  Assumptions about
        the amplicon are conservative-- that the pos can be anywhere within the amplicon--
        so the amplicon_width will be pos*2-1.
        """
        return NotImplementedError
    
    def sequence_around_region(self, chromosome, startpos, endpos, amplicon_width, prefix_length=0, suffix_length=0):
        """
        Similar to sequence_around_loc, but supply a region instead of a single base.
        Startpos and endpos are inclusive, such that if startpos = endpos, it will
        have the same effect as calling sequence_around_loc(startpos or endpos)
        
        If the startpos and endpos include 4 bases, and the amplicon width is 6, the
        amplicon returned will be the 4 base with a padding of 2 on either end, such
        that the sequence will include all possible amplicon ranges of length 6
        which contain the 4-base region.
        """
        return NotImplementedError
    

class SNPDataSource(object):
    
    def snps_in_range(self, chromosome, startpos, endpos):
        """
        Get the list of snps between the startpos and endpos, inclusive.
        """
        return NotImplementedError
    
    def snps_by_rsid(self, rsid):
        """
        Get information about the specified SNP.  A SNP can appear at
        multiple locations given a particular rsid.
        """
        return NotImplementedError

class MutationTransformer(object):
    """
    An object that transforms sequences into their possible
    variants.  The dependency in the implementation is primarily
    in how the mutation is stored-- if I change the Mutation to have a
    common interface, then this could be a solid, rather than an
    abstract class.
    """
    def sequence_variant(self, sequence, mutation, strand='+'):
        """
        Return the variant of the sequence with the specified mutation.
        Does not return a SimpleGenomeSequence, rather the sequence of
        base pairs itself (TODO: though this may need to change, see UCSC
        implementation)
        
        @param sequence A SimpleGenomeSequence.
        @param mutation A mutation (implementation-specific for now-- see class docstr)
        @return A TransformedGenomeSequence, which you can use to determine shifted base positions.
        """
        return NotImplementedError
    
    def sequence_variants(self, sequence, mutations=None, combination_width=0, strand='+'):
        """
        Return all sequences that are generated by the set of mutations.
        The combination width is the size window that multiple mutations
        have to be within in order to generate unique combinations for them.
        
        For example, given a combination width of 6 and two SNPs (s1,s2)
        within 3 base pairs of each other, generate the following
        combinations:
        
        sequence with s1, s2 base allele
        sequence with s1 variant
        sequence with s2 variant
        sequence with s1 and s2 variants
        
        If combination_width is set to len(sequence), then the number of
        variants returned will be combinatoric in size, so be careful.
        The application for multiple variants I have in mind is for
        restriction enzymes, where a combination of SNPs may cause a cut.
        
        @param sequence A SimpleGenomeSequence.
        @param mutations A list of mutations (implementation-specific for now, see class docstr)
        @param combination_width See method docstr.
        @return An array of TransformedGenomeSequences.
        """
        return NotImplementedError

class UnknownMutationError(ValueError):
    pass

class UnhandledMutationWarning(Exception):
    pass